#!/usr/bin/env bash
set -euo pipefail

devbox_schema_file=.devbox.yml

devbox_bin_dir="$(dirname "$BASH_SOURCE")"
devbox_src_dir="$devbox_bin_dir/.."
devbox_shell_dir="$devbox_src_dir/shell"

devbox_docker_registry=gitlab.men-at-work.de:4774
devbox_image="$devbox_docker_registry/entwicklung/devbox"

devbox_volume_cache=devbox-cache
devbox_volume_mysql=devbox-mysql
devbox_volume_sessions=devbox-sessions
devbox_volume_logs=devbox-logs

main() {
  if [[ $# < 1 ]]; then
    echo_error "Kein Befehl angegeben"
    . "$devbox_bin_dir/commands/help.sh"
    exit 1
  fi

  local command="$1"
  shift

  local command_script="$devbox_bin_dir/commands/$command.sh"

  if [[ ! -f "$command_script" ]]; then
    echo_error "Unbekannter Befehl: $command"
    exit 1
  fi

  . "$command_script"
}

if [[ "$(uname)" == Msys ]]; then
  # docker on windows requires winpty for an interactive tty
  devbox_docker() {
    winpty docker "$@"
  }
else
  devbox_docker() {
    docker "$@"
  }
fi

echo_error() { >&2 echo_message $'\e[31m' error "$*"; }
echo_warning() { >&2 echo_message $'\e[33m' warning "$*"; }
echo_info() { echo_message $'\e[34m' info "$*"; }

echo_debug() {
  if is_debug; then
    echo_message $'\e[36m' debug "$*"
  fi
}

echo_message() {
  local color="$1" level="$2" message="$3"
  local color_reset=$'\e[0m'

  # see http://no-color.org/
  if [[ -v NO_COLOR ]]; then
    color=
    color_reset=
  fi

  printf '%s[devbox] %s: %s%s\n' "$color" "$level" "$message" "$color_reset"
}

is_debug() {
  [[ -v DEVBOX_CLI_DEBUG && "$DEVBOX_CLI_DEBUG" == 1 ]]
}

load_dotenv_or_die() {
  if [[ -f "$devbox_src_dir/.env" ]]; then
    . "$devbox_src_dir/.env"
  fi

  local all_present=1

  for var_name; do
    if [[ ! -v "$var_name" || -z "${!var_name}" ]]; then
      echo_error "Notwendige Variable $var_name fehlend oder leer"
      all_present=0
    fi
  done

  if [[ "$all_present" != 1 ]]; then
    exit 1
  fi
}

main "$@"
