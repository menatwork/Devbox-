#!/bin/bash
#
# install -- setup script for the devbox image
#
set -eu

# Skip all interactive package configuration
export DEBIAN_FRONTEND=noninteractive

packages=(
  runit
  apache2
  mariadb-server
  openssh-client
  git
  ruby  # required for mailcatcher
  curl
  htop
  unzip  # composer likes to have this around

  # required for devbox-autoconfig
  python3-pip
  python3-yaml

  # ppa:ondrej/php
  php7.4-fpm php7.4-xml php7.4-curl php7.4-intl php7.4-gd
  php7.4-imagick php7.4-mbstring php7.4-zip php7.4-mysql php7.4-soap
  php7.4-yaml

  php5.6-fpm php5.6-xml php5.6-curl php5.6-intl php5.6-gd
  php5.6-imagick php5.6-mbstring php5.6-zip php5.6-mysql php5.6-soap
  php5.6-mcrypt

  # nodesource
  nodejs
)

composer_1_version=1.10.22
composer_2_version=2.1.8

# These packages can be removed before the image is finalized
packages_temporary=(
  # build requirements for mailcatcher
  build-essential ruby-dev libsqlite3-dev

  # pimpmymlog setup
  sudo
)

# -- Add third-party software sources -------------------------------------------
# (signing keys are in docker/files.apt-pre/etc/apt/trusted.gpg.d)

echo "fetching package lists..."
apt-get update --quiet=2 > /dev/null

echo "installing PPA requirements..."
apt-get install --quiet=2 --no-install-recommends \
	software-properties-common gnupg \
  > /dev/null

echo "adding nodesource repo..."
echo 'deb https://deb.nodesource.com/node_14.x focal main' \
     > /etc/apt/sources.list.d/nodesource.list

# This updates the package lists, no additional apt update is needed
echo "adding ppa:ondrej/php..."
apt-add-repository --yes ppa:ondrej/php > /dev/null

# -- Install upgrades and packages ----------------------------------------------

echo "upgrading base system and installing packages..."
apt-get upgrade --quiet=2 > /dev/null
apt-get install --quiet=2 --no-install-recommends \
	"${packages[@]}" "${packages_temporary[@]}" \
  > /dev/null

echo "installing devbox-autoconfig dependencies..."
pip3 install --quiet inotify cerberus

echo "installing composer..."
curl --location --output /usr/local/bin/composer1 \
    https://getcomposer.org/download/"$composer_1_version"/composer.phar

curl --location --output /usr/local/bin/composer \
    https://getcomposer.org/download/"$composer_2_version"/composer.phar

chmod +x /usr/local/bin/composer1 /usr/local/bin/composer

echo "installing yarn..."
npm install -g yarn > /dev/null

echo "installing mailcatcher..."
gem install --no-document mailcatcher > /dev/null

echo "installing pimp my log..."
mkdir /var/www/pimpmylog
(
  cd /var/www/pimpmylog
  chown www-data: -R /var/www/pimpmylog
  sudo -u www-data composer require --quiet potsky/pimp-my-log
)

# -- Cleanup --------------------------------------------------------------------

echo "minimizing image size..."

export SUDO_FORCE_REMOVE=yes
apt-get autoremove --quiet=2 --purge "${packages_temporary[@]}"
rm -rf /var/lib/apt/lists/*
